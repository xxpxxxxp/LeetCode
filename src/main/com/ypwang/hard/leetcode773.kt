package com.ypwang.hard

class Solution773 {
    private fun convert(board: IntArray): Int {
        return board[0] + (board[1] shl 4) + (board[2] shl 8) + (board[3] shl 12) + (board[4] shl 16) + (board[5] shl 20)
    }

    private fun convertBack(i: Int): IntArray = IntArray(6){ i shr (it * 4) and 0xf }

    fun compute() {
        val initial = convert(intArrayOf(1,2,3,4,5,0))
        var cur = setOf(initial)
        val path = mutableMapOf(initial to 0)

        val swapMap = mapOf(
                0 to intArrayOf(1, 3),
                1 to intArrayOf(0, 2, 4),
                2 to intArrayOf(1, 5),
                3 to intArrayOf(0, 4),
                4 to intArrayOf(1, 3, 5),
                5 to intArrayOf(2, 4)
        )

        var count = 1
        while (cur.isNotEmpty()) {
            val next = mutableSetOf<Int>()
            for (ca in cur) {
                val rep = convertBack(ca)
                val idx = rep.indexOfFirst { it == 0 }
                for (swap in swapMap[idx]!!) {
                    val t = rep.copyOf()
                    t[idx] = t[swap]
                    t[swap] = 0
                    val s = convert(t)
                    if (s !in path) {
                        next.add(s)
                    }
                }
            }

            cur = next
            cur.forEach { path[it] = count }
            count++
        }

        for ((k, v) in path) {
            print("$k to $v, ")
        }
    }

    fun slidingPuzzle(board: Array<IntArray>): Int {
        val map = mapOf(344865 to 0, 3489825 to 1, 5260065 to 1, 3490305 to 2, 5391105 to 2, 5505825 to 2, 3490320 to 3, 3162705 to 3, 5391120 to 3, 5390385 to 3, 5509920 to 3, 3473940 to 4, 3408465 to 4, 213585 to 4, 5374740 to 4, 148785 to 4, 5509890 to 4, 3166740 to 5, 3412560 to 5, 2310225 to 5, 5251860 to 5, 2114865 to 5, 5509170 to 5, 5247810 to 5, 3232260 to 6, 217620 to 6, 3412485 to 6, 2311425 to 6, 5317380 to 6, 336660 to 6, 2360625 to 6, 267570 to 6, 5309250 to 6, 332610 to 6, 3232320 to 7, 3231780 to 7, 2314260 to 7, 3412005 to 7, 3150405 to 7, 2311440 to 7, 5317440 to 7, 5316660 to 7, 3481620 to 7, 2364720 to 7, 4199730 to 7, 3477570 to 7, 3211845 to 8, 86820 to 8, 2314500 to 8, 267045 to 8, 201285 to 8, 2295060 to 8, 75060 to 8, 3481860 to 8, 2364675 to 8, 4396290 to 8, 4261170 to 8, 3478530 to 8, 1069860 to 9, 2314560 to 9, 2117940 to 9, 4199205 to 9, 2297925 to 9, 2110740 to 9, 1058100 to 9, 3481920 to 9, 3154260 to 9, 2363475 to 9, 2102595 to 9, 4396320 to 9, 4395090 to 9, 4269360 to 9, 3478560 to 9, 3150930 to 9, 1200900 to 10, 1377060 to 10, 2294085 to 10, 2425140 to 10, 151860 to 10, 4330245 to 10, 4260645 to 10, 2298885 to 10, 2176260 to 10, 144660 to 10, 1254660 to 10, 1180980 to 10, 3473730 to 10, 3277140 to 10, 205140 to 10, 266835 to 10, 2164035 to 10, 136515 to 10, 4392225 to 10, 201810 to 10, 4269315 to 10, 3474465 to 10, 3212370 to 10, 1200960 to 11, 1200180 to 11, 1393440 to 11, 2109765 to 11, 2441520 to 11, 4330320 to 11, 4329525 to 11, 4281120 to 11, 2298960 to 11, 2102325 to 11, 2176320 to 11, 2175060 to 11, 5386260 to 11, 1254720 to 11, 1253460 to 11, 1197360 to 11, 3166530 to 11, 3293520 to 11, 4198995 to 11, 5378115 to 11, 4207905 to 11, 4268115 to 11, 4203795 to 11, 3167265 to 11, 3220560 to 11, 1180485 to 12, 1393410 to 12, 2371845 to 12, 143685 to 12, 2441475 to 12, 4326225 to 12, 136245 to 12, 4281090 to 12, 2294865 to 12, 2163765 to 12, 78420 to 12, 5386500 to 12, 1246530 to 12, 1197315 to 12, 3428610 to 12, 217410 to 12, 3293445 to 12, 4526595 to 12, 4260435 to 12, 5379075 to 12, 4338945 to 12, 275745 to 12, 74835 to 12, 4326675 to 12, 271635 to 12, 3298305 to 12, 218145 to 12, 3220485 to 12, 1057605 to 13, 1392690 to 13, 1065810 to 13, 2371920 to 13, 2371605 to 13, 1192005 to 13, 2441235 to 13, 2113875 to 13, 4203345 to 13, 4280370 to 13, 4215570 to 13, 2110545 to 13, 2184240 to 13, 1061460 to 13, 5386560 to 13, 5255460 to 13, 1062210 to 13, 1196115 to 13, 1066275 to 13, 3428640 to 13, 3428370 to 13, 1265730 to 13, 3293205 to 13, 3162405 to 13, 4526640 to 13, 4526115 to 13, 4272720 to 13, 5379120 to 13, 5248035 to 13, 4338960 to 13, 4337745 to 13, 5517345 to 13, 1057875 to 13, 5513235 to 13, 3298320 to 13, 3297345 to 13, 4411425 to 13, 3219525 to 13, 3154965 to 13, 1319685 to 14, 74565 to 14, 344370 to 14, 1311570 to 14, 82770 to 14, 2359635 to 14, 274965 to 14, 1192965 to 14, 344595 to 14, 147795 to 14, 4530945 to 14, 271185 to 14, 87090 to 14, 4522770 to 14, 283410 to 14, 2438145 to 14, 144465 to 14, 2184195 to 14, 1389060 to 14, 1245780 to 14, 5374275 to 14, 5439780 to 14, 340260 to 14, 1324290 to 14, 79170 to 14, 1312035 to 14, 83235 to 14, 3408165 to 14, 1266690 to 14, 148245 to 14, 213285 to 14, 4522545 to 14, 332835 to 14, 4272645 to 14, 5375025 to 14, 5309475 to 14, 5517825 to 14, 1385475 to 14, 1180755 to 14, 5513475 to 14, 3277845 to 14, 152385 to 14, 4411905 to 14, 205845 to 14, 1319760 to 15, 1318965 to 15, 5259570 to 15, 3227730 to 15, 4207125 to 15, 1193040 to 15, 1061925 to 15, 5259795 to 15, 4530960 to 15, 4530225 to 15, 3416145 to 15, 1070130 to 15, 2438160 to 15, 2437185 to 15, 2183235 to 15, 2118675 to 15, 1389120 to 15, 1388580 to 15, 1262160 to 15, 5251395 to 15, 5456160 to 15, 1324320 to 15, 1323090 to 15, 5320770 to 15, 5324835 to 15, 1266720 to 15, 2114325 to 15, 1261605 to 15, 4215345 to 15, 4272165 to 15, 5252145 to 15, 5321760 to 15, 5517840 to 15, 5255745 to 15, 1385520 to 15, 1384515 to 15, 5513520 to 15, 2118465 to 15, 4411920 to 15, 4399125 to 15, 270645 to 16, 5456130 to 16, 5505330 to 16, 3228930 to 16, 4391445 to 16, 1246245 to 16, 78885 to 16, 5325315 to 16, 5505555 to 16, 336945 to 16, 3417345 to 16, 1377330 to 16, 2425875 to 16, 340545 to 16, 86595 to 16, 152595 to 16, 1376835 to 16, 1262085 to 16, 336195 to 16, 274770 to 16, 5321730 to 16, 2179845 to 16, 2360085 to 16, 283185 to 16, 5448705 to 16, 5440065 to 16, 2380545 to 16, 2425665 to 16, 4399365 to 16, 4202805 to 17, 5455890 to 17, 3228960 to 17, 3163410 to 17, 5325360 to 17, 3417360 to 17, 3155265 to 17, 1069635 to 17, 4345875 to 17, 1065525 to 17, 4206930 to 17, 5256210 to 17, 2179920 to 17, 2179125 to 17, 2380560 to 17, 2379825 to 17, 5448720 to 17, 5447745 to 17, 5444160 to 17, 2429760 to 17, 4399440 to 17, 4325685 to 18, 214290 to 18, 3212580 to 18, 3409170 to 18, 5308980 to 18, 3278145 to 18, 206145 to 18, 1331715 to 18, 4346115 to 18, 1311285 to 18, 82485 to 18, 4534530 to 18, 4391250 to 18, 5440530 to 18, 341010 to 18, 2163540 to 18, 5444100 to 18, 2429700 to 18, 4346160 to 19, 3151140 to 19, 5247540 to 19, 3282240 to 19, 1331760 to 19, 1331235 to 19, 4215075 to 19, 4534560 to 19, 4534290 to 19, 2102100 to 19, 5443620 to 19, 2428980 to 19, 3282180 to 20, 202020 to 20, 332340 to 20, 282915 to 20, 4522275 to 20, 136020 to 20, 3280980 to 21)
        return map.getOrDefault(board[0][0] + (board[0][1] shl 4) + (board[0][2] shl 8) + (board[1][0] shl 12) + (board[1][1] shl 16) + (board[1][2] shl 20), -1)
    }
}

fun main() {
    Solution773().slidingPuzzle(arrayOf())
}